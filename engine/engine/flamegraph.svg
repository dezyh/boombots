<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="677.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="10497"><g><title>_int_free (18 samples, 0.17%)</title><rect x="0.0000%" y="597" width="0.1715%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="18"/><text x="0.2500%" y="607.50"></text></g><g><title>_int_malloc (5 samples, 0.05%)</title><rect x="0.1715%" y="597" width="0.0476%" height="15" fill="rgb(217,0,24)" fg:x="18" fg:w="5"/><text x="0.4215%" y="607.50"></text></g><g><title>_int_realloc (9 samples, 0.09%)</title><rect x="0.2191%" y="597" width="0.0857%" height="15" fill="rgb(221,193,54)" fg:x="23" fg:w="9"/><text x="0.4691%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.08%)</title><rect x="0.3048%" y="597" width="0.0762%" height="15" fill="rgb(248,212,6)" fg:x="32" fg:w="8"/><text x="0.5548%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.08%)</title><rect x="0.3048%" y="581" width="0.0762%" height="15" fill="rgb(208,68,35)" fg:x="32" fg:w="8"/><text x="0.5548%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (8 samples, 0.08%)</title><rect x="0.3048%" y="565" width="0.0762%" height="15" fill="rgb(232,128,0)" fg:x="32" fg:w="8"/><text x="0.5548%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (8 samples, 0.08%)</title><rect x="0.3048%" y="549" width="0.0762%" height="15" fill="rgb(207,160,47)" fg:x="32" fg:w="8"/><text x="0.5548%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="0.3811%" y="597" width="0.0381%" height="15" fill="rgb(228,23,34)" fg:x="40" fg:w="4"/><text x="0.6311%" y="607.50"></text></g><g><title>[[heap]] (47 samples, 0.45%)</title><rect x="0.0000%" y="613" width="0.4477%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="47"/><text x="0.2500%" y="623.50"></text></g><g><title>boombots_engine::search::Search::negamax_score (3 samples, 0.03%)</title><rect x="0.4192%" y="597" width="0.0286%" height="15" fill="rgb(220,122,19)" fg:x="44" fg:w="3"/><text x="0.6692%" y="607.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.10%)</title><rect x="0.4477%" y="597" width="0.0953%" height="15" fill="rgb(250,228,42)" fg:x="47" fg:w="10"/><text x="0.6977%" y="607.50"></text></g><g><title>__rdl_realloc (8 samples, 0.08%)</title><rect x="0.5430%" y="597" width="0.0762%" height="15" fill="rgb(240,193,28)" fg:x="57" fg:w="8"/><text x="0.7930%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.05%)</title><rect x="0.6192%" y="597" width="0.0476%" height="15" fill="rgb(216,20,37)" fg:x="65" fg:w="5"/><text x="0.8692%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.04%)</title><rect x="0.6288%" y="581" width="0.0381%" height="15" fill="rgb(206,188,39)" fg:x="66" fg:w="4"/><text x="0.8788%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.03%)</title><rect x="0.6383%" y="565" width="0.0286%" height="15" fill="rgb(217,207,13)" fg:x="67" fg:w="3"/><text x="0.8883%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.03%)</title><rect x="0.6383%" y="549" width="0.0286%" height="15" fill="rgb(231,73,38)" fg:x="67" fg:w="3"/><text x="0.8883%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (2 samples, 0.02%)</title><rect x="0.6764%" y="581" width="0.0191%" height="15" fill="rgb(225,20,46)" fg:x="71" fg:w="2"/><text x="0.9264%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="0.6764%" y="565" width="0.0191%" height="15" fill="rgb(210,31,41)" fg:x="71" fg:w="2"/><text x="0.9264%" y="575.50"></text></g><g><title>boombots_engine::action::Action::generate (9 samples, 0.09%)</title><rect x="0.6669%" y="597" width="0.0857%" height="15" fill="rgb(221,200,47)" fg:x="70" fg:w="9"/><text x="0.9169%" y="607.50"></text></g><g><title>boombots_engine::action::Action::generate_for_height (6 samples, 0.06%)</title><rect x="0.6954%" y="581" width="0.0572%" height="15" fill="rgb(226,26,5)" fg:x="73" fg:w="6"/><text x="0.9454%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.06%)</title><rect x="0.6954%" y="565" width="0.0572%" height="15" fill="rgb(249,33,26)" fg:x="73" fg:w="6"/><text x="0.9454%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.06%)</title><rect x="0.6954%" y="549" width="0.0572%" height="15" fill="rgb(235,183,28)" fg:x="73" fg:w="6"/><text x="0.9454%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.06%)</title><rect x="0.6954%" y="533" width="0.0572%" height="15" fill="rgb(221,5,38)" fg:x="73" fg:w="6"/><text x="0.9454%" y="543.50"></text></g><g><title>[[stack]] (42 samples, 0.40%)</title><rect x="0.4477%" y="613" width="0.4001%" height="15" fill="rgb(247,18,42)" fg:x="47" fg:w="42"/><text x="0.6977%" y="623.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::delta (10 samples, 0.10%)</title><rect x="0.7526%" y="597" width="0.0953%" height="15" fill="rgb(241,131,45)" fg:x="79" fg:w="10"/><text x="1.0026%" y="607.50"></text></g><g><title>__GI___libc_free (9 samples, 0.09%)</title><rect x="0.8479%" y="597" width="0.0857%" height="15" fill="rgb(249,31,29)" fg:x="89" fg:w="9"/><text x="1.0979%" y="607.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="0.9336%" y="597" width="0.0191%" height="15" fill="rgb(225,111,53)" fg:x="98" fg:w="2"/><text x="1.1836%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.08%)</title><rect x="0.9622%" y="597" width="0.0762%" height="15" fill="rgb(238,160,17)" fg:x="101" fg:w="8"/><text x="1.2122%" y="607.50"></text></g><g><title>_int_free (22 samples, 0.21%)</title><rect x="1.0384%" y="597" width="0.2096%" height="15" fill="rgb(214,148,48)" fg:x="109" fg:w="22"/><text x="1.2884%" y="607.50"></text></g><g><title>_int_malloc (17 samples, 0.16%)</title><rect x="1.2480%" y="597" width="0.1620%" height="15" fill="rgb(232,36,49)" fg:x="131" fg:w="17"/><text x="1.4980%" y="607.50"></text></g><g><title>_int_realloc (22 samples, 0.21%)</title><rect x="1.4099%" y="597" width="0.2096%" height="15" fill="rgb(209,103,24)" fg:x="148" fg:w="22"/><text x="1.6599%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 0.21%)</title><rect x="1.6195%" y="597" width="0.2096%" height="15" fill="rgb(229,88,8)" fg:x="170" fg:w="22"/><text x="1.8695%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.10%)</title><rect x="1.7243%" y="581" width="0.1048%" height="15" fill="rgb(213,181,19)" fg:x="181" fg:w="11"/><text x="1.9743%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.05%)</title><rect x="1.7815%" y="565" width="0.0476%" height="15" fill="rgb(254,191,54)" fg:x="187" fg:w="5"/><text x="2.0315%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (5 samples, 0.05%)</title><rect x="1.7815%" y="549" width="0.0476%" height="15" fill="rgb(241,83,37)" fg:x="187" fg:w="5"/><text x="2.0315%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (27 samples, 0.26%)</title><rect x="1.8291%" y="597" width="0.2572%" height="15" fill="rgb(233,36,39)" fg:x="192" fg:w="27"/><text x="2.0791%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 0.07%)</title><rect x="2.0196%" y="581" width="0.0667%" height="15" fill="rgb(226,3,54)" fg:x="212" fg:w="7"/><text x="2.2696%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 0.07%)</title><rect x="2.0196%" y="565" width="0.0667%" height="15" fill="rgb(245,192,40)" fg:x="212" fg:w="7"/><text x="2.2696%" y="575.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.07%)</title><rect x="2.0196%" y="549" width="0.0667%" height="15" fill="rgb(238,167,29)" fg:x="212" fg:w="7"/><text x="2.2696%" y="559.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::delta (121 samples, 1.15%)</title><rect x="2.0958%" y="597" width="1.1527%" height="15" fill="rgb(232,182,51)" fg:x="220" fg:w="121"/><text x="2.3458%" y="607.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make (122 samples, 1.16%)</title><rect x="3.2485%" y="597" width="1.1622%" height="15" fill="rgb(231,60,39)" fg:x="341" fg:w="122"/><text x="3.4985%" y="607.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::undo (27 samples, 0.26%)</title><rect x="4.4108%" y="597" width="0.2572%" height="15" fill="rgb(208,69,12)" fg:x="463" fg:w="27"/><text x="4.6608%" y="607.50"></text></g><g><title>boombots_engine::search::Search::negamax_score (394 samples, 3.75%)</title><rect x="4.6680%" y="597" width="3.7535%" height="15" fill="rgb(235,93,37)" fg:x="490" fg:w="394"/><text x="4.9180%" y="607.50">boom..</text></g><g><title>[unknown] (796 samples, 7.58%)</title><rect x="0.8479%" y="613" width="7.5831%" height="15" fill="rgb(213,116,39)" fg:x="89" fg:w="796"/><text x="1.0979%" y="623.50">[unknown]</text></g><g><title>__GI___libc_free (5 samples, 0.05%)</title><rect x="8.4310%" y="613" width="0.0476%" height="15" fill="rgb(222,207,29)" fg:x="885" fg:w="5"/><text x="8.6810%" y="623.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.05%)</title><rect x="8.4786%" y="613" width="0.0476%" height="15" fill="rgb(206,96,30)" fg:x="890" fg:w="5"/><text x="8.7286%" y="623.50"></text></g><g><title>__GI___libc_realloc (18 samples, 0.17%)</title><rect x="8.5262%" y="613" width="0.1715%" height="15" fill="rgb(218,138,4)" fg:x="895" fg:w="18"/><text x="8.7762%" y="623.50"></text></g><g><title>__rdl_realloc (10 samples, 0.10%)</title><rect x="8.6977%" y="613" width="0.0953%" height="15" fill="rgb(250,191,14)" fg:x="913" fg:w="10"/><text x="8.9477%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (10 samples, 0.10%)</title><rect x="8.6977%" y="597" width="0.0953%" height="15" fill="rgb(239,60,40)" fg:x="913" fg:w="10"/><text x="8.9477%" y="607.50"></text></g><g><title>boombots_engine::action::Action::generate (2 samples, 0.02%)</title><rect x="8.8501%" y="309" width="0.0191%" height="15" fill="rgb(206,27,48)" fg:x="929" fg:w="2"/><text x="9.1001%" y="319.50"></text></g><g><title>boombots_engine::action::Action::generate_for_height (2 samples, 0.02%)</title><rect x="8.8501%" y="293" width="0.0191%" height="15" fill="rgb(225,35,8)" fg:x="929" fg:w="2"/><text x="9.1001%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="8.8501%" y="277" width="0.0191%" height="15" fill="rgb(250,213,24)" fg:x="929" fg:w="2"/><text x="9.1001%" y="287.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::delta (3 samples, 0.03%)</title><rect x="8.8692%" y="309" width="0.0286%" height="15" fill="rgb(247,123,22)" fg:x="931" fg:w="3"/><text x="9.1192%" y="319.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make (3 samples, 0.03%)</title><rect x="8.8978%" y="309" width="0.0286%" height="15" fill="rgb(231,138,38)" fg:x="934" fg:w="3"/><text x="9.1478%" y="319.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make_directional (3 samples, 0.03%)</title><rect x="8.8978%" y="293" width="0.0286%" height="15" fill="rgb(231,145,46)" fg:x="934" fg:w="3"/><text x="9.1478%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="8.9645%" y="293" width="0.0191%" height="15" fill="rgb(251,118,11)" fg:x="941" fg:w="2"/><text x="9.2145%" y="303.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="8.9645%" y="277" width="0.0191%" height="15" fill="rgb(217,147,25)" fg:x="941" fg:w="2"/><text x="9.2145%" y="287.50"></text></g><g><title>boombots_engine::action::Action::generate (2 samples, 0.02%)</title><rect x="8.9835%" y="277" width="0.0191%" height="15" fill="rgb(247,81,37)" fg:x="943" fg:w="2"/><text x="9.2335%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.07%)</title><rect x="9.0978%" y="245" width="0.0667%" height="15" fill="rgb(209,12,38)" fg:x="955" fg:w="7"/><text x="9.3478%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.07%)</title><rect x="9.0978%" y="229" width="0.0667%" height="15" fill="rgb(227,1,9)" fg:x="955" fg:w="7"/><text x="9.3478%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.07%)</title><rect x="9.0978%" y="213" width="0.0667%" height="15" fill="rgb(248,47,43)" fg:x="955" fg:w="7"/><text x="9.3478%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.07%)</title><rect x="9.0978%" y="197" width="0.0667%" height="15" fill="rgb(221,10,30)" fg:x="955" fg:w="7"/><text x="9.3478%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.06%)</title><rect x="9.1074%" y="181" width="0.0572%" height="15" fill="rgb(210,229,1)" fg:x="956" fg:w="6"/><text x="9.3574%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.06%)</title><rect x="9.1074%" y="165" width="0.0572%" height="15" fill="rgb(222,148,37)" fg:x="956" fg:w="6"/><text x="9.3574%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.06%)</title><rect x="9.1074%" y="149" width="0.0572%" height="15" fill="rgb(234,67,33)" fg:x="956" fg:w="6"/><text x="9.3574%" y="159.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.06%)</title><rect x="9.1074%" y="133" width="0.0572%" height="15" fill="rgb(247,98,35)" fg:x="956" fg:w="6"/><text x="9.3574%" y="143.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.06%)</title><rect x="9.1074%" y="117" width="0.0572%" height="15" fill="rgb(247,138,52)" fg:x="956" fg:w="6"/><text x="9.3574%" y="127.50"></text></g><g><title>_int_realloc (4 samples, 0.04%)</title><rect x="9.1264%" y="101" width="0.0381%" height="15" fill="rgb(213,79,30)" fg:x="958" fg:w="4"/><text x="9.3764%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="9.1359%" y="85" width="0.0286%" height="15" fill="rgb(246,177,23)" fg:x="959" fg:w="3"/><text x="9.3859%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.10%)</title><rect x="9.0693%" y="261" width="0.1048%" height="15" fill="rgb(230,62,27)" fg:x="952" fg:w="11"/><text x="9.3193%" y="271.50"></text></g><g><title>boombots_engine::bitwise::Bitwise::adj (7 samples, 0.07%)</title><rect x="9.1740%" y="261" width="0.0667%" height="15" fill="rgb(216,154,8)" fg:x="963" fg:w="7"/><text x="9.4240%" y="271.50"></text></g><g><title>boombots_engine::bitwise::Bitwise::idx (4 samples, 0.04%)</title><rect x="9.2026%" y="245" width="0.0381%" height="15" fill="rgb(244,35,45)" fg:x="966" fg:w="4"/><text x="9.4526%" y="255.50"></text></g><g><title>boombots_engine::action::Action::generate (28 samples, 0.27%)</title><rect x="8.9835%" y="293" width="0.2667%" height="15" fill="rgb(251,115,12)" fg:x="943" fg:w="28"/><text x="9.2335%" y="303.50"></text></g><g><title>boombots_engine::action::Action::generate_for_height (26 samples, 0.25%)</title><rect x="9.0026%" y="277" width="0.2477%" height="15" fill="rgb(240,54,50)" fg:x="945" fg:w="26"/><text x="9.2526%" y="287.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::height (9 samples, 0.09%)</title><rect x="9.3265%" y="261" width="0.0857%" height="15" fill="rgb(233,84,52)" fg:x="979" fg:w="9"/><text x="9.5765%" y="271.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::delta (20 samples, 0.19%)</title><rect x="9.2503%" y="293" width="0.1905%" height="15" fill="rgb(207,117,47)" fg:x="971" fg:w="20"/><text x="9.5003%" y="303.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::delta_directional (13 samples, 0.12%)</title><rect x="9.3169%" y="277" width="0.1238%" height="15" fill="rgb(249,43,39)" fg:x="978" fg:w="13"/><text x="9.5669%" y="287.50"></text></g><g><title>boombots_engine::bitwise::Bitwise::pos (3 samples, 0.03%)</title><rect x="9.4122%" y="261" width="0.0286%" height="15" fill="rgb(209,38,44)" fg:x="988" fg:w="3"/><text x="9.6622%" y="271.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make_directional (24 samples, 0.23%)</title><rect x="9.4598%" y="277" width="0.2286%" height="15" fill="rgb(236,212,23)" fg:x="993" fg:w="24"/><text x="9.7098%" y="287.50"></text></g><g><title>boombots_engine::bitwise::Bitwise::idx (2 samples, 0.02%)</title><rect x="9.6694%" y="261" width="0.0191%" height="15" fill="rgb(242,79,21)" fg:x="1015" fg:w="2"/><text x="9.9194%" y="271.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make (29 samples, 0.28%)</title><rect x="9.4408%" y="293" width="0.2763%" height="15" fill="rgb(211,96,35)" fg:x="991" fg:w="29"/><text x="9.6908%" y="303.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::toggle_turn (3 samples, 0.03%)</title><rect x="9.6885%" y="277" width="0.0286%" height="15" fill="rgb(253,215,40)" fg:x="1017" fg:w="3"/><text x="9.9385%" y="287.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::toggle_turn (3 samples, 0.03%)</title><rect x="9.7171%" y="277" width="0.0286%" height="15" fill="rgb(211,81,21)" fg:x="1020" fg:w="3"/><text x="9.9671%" y="287.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::undo (9 samples, 0.09%)</title><rect x="9.7171%" y="293" width="0.0857%" height="15" fill="rgb(208,190,38)" fg:x="1020" fg:w="9"/><text x="9.9671%" y="303.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::undo_directional (6 samples, 0.06%)</title><rect x="9.7456%" y="277" width="0.0572%" height="15" fill="rgb(235,213,38)" fg:x="1023" fg:w="6"/><text x="9.9956%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.39%)</title><rect x="11.6319%" y="277" width="0.3906%" height="15" fill="rgb(237,122,38)" fg:x="1221" fg:w="41"/><text x="11.8819%" y="287.50"></text></g><g><title>core::ptr::read (34 samples, 0.32%)</title><rect x="11.6986%" y="261" width="0.3239%" height="15" fill="rgb(244,218,35)" fg:x="1228" fg:w="34"/><text x="11.9486%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.03%)</title><rect x="12.0606%" y="213" width="0.0286%" height="15" fill="rgb(240,68,47)" fg:x="1266" fg:w="3"/><text x="12.3106%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next_back (21 samples, 0.20%)</title><rect x="12.0511%" y="229" width="0.2001%" height="15" fill="rgb(210,16,53)" fg:x="1265" fg:w="21"/><text x="12.3011%" y="239.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (17 samples, 0.16%)</title><rect x="12.0892%" y="213" width="0.1620%" height="15" fill="rgb(235,124,12)" fg:x="1269" fg:w="17"/><text x="12.3392%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.21%)</title><rect x="12.0511%" y="261" width="0.2096%" height="15" fill="rgb(224,169,11)" fg:x="1265" fg:w="22"/><text x="12.3011%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next_back (22 samples, 0.21%)</title><rect x="12.0511%" y="245" width="0.2096%" height="15" fill="rgb(250,166,2)" fg:x="1265" fg:w="22"/><text x="12.3011%" y="255.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.10%)</title><rect x="12.2702%" y="149" width="0.0953%" height="15" fill="rgb(242,216,29)" fg:x="1288" fg:w="10"/><text x="12.5202%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.11%)</title><rect x="12.2702%" y="165" width="0.1143%" height="15" fill="rgb(230,116,27)" fg:x="1288" fg:w="12"/><text x="12.5202%" y="175.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="12.3654%" y="149" width="0.0191%" height="15" fill="rgb(228,99,48)" fg:x="1298" fg:w="2"/><text x="12.6154%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="12.3654%" y="133" width="0.0191%" height="15" fill="rgb(253,11,6)" fg:x="1298" fg:w="2"/><text x="12.6154%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.13%)</title><rect x="12.2606%" y="181" width="0.1334%" height="15" fill="rgb(247,143,39)" fg:x="1287" fg:w="14"/><text x="12.5106%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (18 samples, 0.17%)</title><rect x="12.2606%" y="229" width="0.1715%" height="15" fill="rgb(236,97,10)" fg:x="1287" fg:w="18"/><text x="12.5106%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.17%)</title><rect x="12.2606%" y="213" width="0.1715%" height="15" fill="rgb(233,208,19)" fg:x="1287" fg:w="18"/><text x="12.5106%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.17%)</title><rect x="12.2606%" y="197" width="0.1715%" height="15" fill="rgb(216,164,2)" fg:x="1287" fg:w="18"/><text x="12.5106%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.04%)</title><rect x="12.3940%" y="181" width="0.0381%" height="15" fill="rgb(220,129,5)" fg:x="1301" fg:w="4"/><text x="12.6440%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (30 samples, 0.29%)</title><rect x="12.2606%" y="261" width="0.2858%" height="15" fill="rgb(242,17,10)" fg:x="1287" fg:w="30"/><text x="12.5106%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (30 samples, 0.29%)</title><rect x="12.2606%" y="245" width="0.2858%" height="15" fill="rgb(242,107,0)" fg:x="1287" fg:w="30"/><text x="12.5106%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.11%)</title><rect x="12.4321%" y="229" width="0.1143%" height="15" fill="rgb(251,28,31)" fg:x="1305" fg:w="12"/><text x="12.6821%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.08%)</title><rect x="12.4702%" y="213" width="0.0762%" height="15" fill="rgb(233,223,10)" fg:x="1309" fg:w="8"/><text x="12.7202%" y="223.50"></text></g><g><title>boombots_engine::action::Action::generate (73 samples, 0.70%)</title><rect x="12.5464%" y="261" width="0.6954%" height="15" fill="rgb(215,21,27)" fg:x="1317" fg:w="73"/><text x="12.7964%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="14.1850%" y="165" width="0.0191%" height="15" fill="rgb(232,23,21)" fg:x="1489" fg:w="2"/><text x="14.4350%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.04%)</title><rect x="14.2041%" y="165" width="0.0381%" height="15" fill="rgb(244,5,23)" fg:x="1491" fg:w="4"/><text x="14.4541%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (10 samples, 0.10%)</title><rect x="14.2422%" y="165" width="0.0953%" height="15" fill="rgb(226,81,46)" fg:x="1495" fg:w="10"/><text x="14.4922%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (4 samples, 0.04%)</title><rect x="14.2993%" y="149" width="0.0381%" height="15" fill="rgb(247,70,30)" fg:x="1501" fg:w="4"/><text x="14.5493%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.20%)</title><rect x="14.8233%" y="69" width="0.2001%" height="15" fill="rgb(212,68,19)" fg:x="1556" fg:w="21"/><text x="15.0733%" y="79.50"></text></g><g><title>_int_free (11 samples, 0.10%)</title><rect x="15.0233%" y="69" width="0.1048%" height="15" fill="rgb(240,187,13)" fg:x="1577" fg:w="11"/><text x="15.2733%" y="79.50"></text></g><g><title>__GI___libc_realloc (99 samples, 0.94%)</title><rect x="14.3755%" y="101" width="0.9431%" height="15" fill="rgb(223,113,26)" fg:x="1509" fg:w="99"/><text x="14.6255%" y="111.50"></text></g><g><title>_int_realloc (72 samples, 0.69%)</title><rect x="14.6328%" y="85" width="0.6859%" height="15" fill="rgb(206,192,2)" fg:x="1536" fg:w="72"/><text x="14.8828%" y="95.50"></text></g><g><title>_int_malloc (20 samples, 0.19%)</title><rect x="15.1281%" y="69" width="0.1905%" height="15" fill="rgb(241,108,4)" fg:x="1588" fg:w="20"/><text x="15.3781%" y="79.50"></text></g><g><title>__rdl_realloc (9 samples, 0.09%)</title><rect x="15.3187%" y="101" width="0.0857%" height="15" fill="rgb(247,173,49)" fg:x="1608" fg:w="9"/><text x="15.5687%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (8 samples, 0.08%)</title><rect x="15.3282%" y="85" width="0.0762%" height="15" fill="rgb(224,114,35)" fg:x="1609" fg:w="8"/><text x="15.5782%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (110 samples, 1.05%)</title><rect x="14.3755%" y="149" width="1.0479%" height="15" fill="rgb(245,159,27)" fg:x="1509" fg:w="110"/><text x="14.6255%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (110 samples, 1.05%)</title><rect x="14.3755%" y="133" width="1.0479%" height="15" fill="rgb(245,172,44)" fg:x="1509" fg:w="110"/><text x="14.6255%" y="143.50"></text></g><g><title>alloc::alloc::realloc (110 samples, 1.05%)</title><rect x="14.3755%" y="117" width="1.0479%" height="15" fill="rgb(236,23,11)" fg:x="1509" fg:w="110"/><text x="14.6255%" y="127.50"></text></g><g><title>__rust_realloc (2 samples, 0.02%)</title><rect x="15.4044%" y="101" width="0.0191%" height="15" fill="rgb(205,117,38)" fg:x="1617" fg:w="2"/><text x="15.6544%" y="111.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="15.4235%" y="149" width="0.0191%" height="15" fill="rgb(237,72,25)" fg:x="1619" fg:w="2"/><text x="15.6735%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="15.4235%" y="133" width="0.0191%" height="15" fill="rgb(244,70,9)" fg:x="1619" fg:w="2"/><text x="15.6735%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (117 samples, 1.11%)</title><rect x="14.3374%" y="165" width="1.1146%" height="15" fill="rgb(217,125,39)" fg:x="1505" fg:w="117"/><text x="14.5874%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.02%)</title><rect x="15.4520%" y="165" width="0.0191%" height="15" fill="rgb(235,36,10)" fg:x="1622" fg:w="2"/><text x="15.7020%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.06%)</title><rect x="15.4711%" y="133" width="0.0572%" height="15" fill="rgb(251,123,47)" fg:x="1624" fg:w="6"/><text x="15.7211%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (142 samples, 1.35%)</title><rect x="14.1850%" y="181" width="1.3528%" height="15" fill="rgb(221,13,13)" fg:x="1489" fg:w="142"/><text x="14.4350%" y="191.50"></text></g><g><title>core::cmp::max (7 samples, 0.07%)</title><rect x="15.4711%" y="165" width="0.0667%" height="15" fill="rgb(238,131,9)" fg:x="1624" fg:w="7"/><text x="15.7211%" y="175.50"></text></g><g><title>core::cmp::Ord::max (7 samples, 0.07%)</title><rect x="15.4711%" y="149" width="0.0667%" height="15" fill="rgb(211,50,8)" fg:x="1624" fg:w="7"/><text x="15.7211%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (143 samples, 1.36%)</title><rect x="14.1850%" y="229" width="1.3623%" height="15" fill="rgb(245,182,24)" fg:x="1489" fg:w="143"/><text x="14.4350%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (143 samples, 1.36%)</title><rect x="14.1850%" y="213" width="1.3623%" height="15" fill="rgb(242,14,37)" fg:x="1489" fg:w="143"/><text x="14.4350%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (143 samples, 1.36%)</title><rect x="14.1850%" y="197" width="1.3623%" height="15" fill="rgb(246,228,12)" fg:x="1489" fg:w="143"/><text x="14.4350%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.04%)</title><rect x="15.5473%" y="229" width="0.0381%" height="15" fill="rgb(213,55,15)" fg:x="1632" fg:w="4"/><text x="15.7973%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.04%)</title><rect x="15.5473%" y="213" width="0.0381%" height="15" fill="rgb(209,9,3)" fg:x="1632" fg:w="4"/><text x="15.7973%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (221 samples, 2.11%)</title><rect x="13.7277%" y="245" width="2.1054%" height="15" fill="rgb(230,59,30)" fg:x="1441" fg:w="221"/><text x="13.9777%" y="255.50">a..</text></g><g><title>core::ptr::write (26 samples, 0.25%)</title><rect x="15.5854%" y="229" width="0.2477%" height="15" fill="rgb(209,121,21)" fg:x="1636" fg:w="26"/><text x="15.8354%" y="239.50"></text></g><g><title>boombots_engine::action::Action::generate (4 samples, 0.04%)</title><rect x="15.8331%" y="245" width="0.0381%" height="15" fill="rgb(220,109,13)" fg:x="1662" fg:w="4"/><text x="16.0831%" y="255.50"></text></g><g><title>boombots_engine::action::Action::is_attack (7 samples, 0.07%)</title><rect x="15.8712%" y="245" width="0.0667%" height="15" fill="rgb(232,18,1)" fg:x="1666" fg:w="7"/><text x="16.1212%" y="255.50"></text></g><g><title>boombots_engine::bitwise::Bitwise::adj (73 samples, 0.70%)</title><rect x="15.9474%" y="245" width="0.6954%" height="15" fill="rgb(215,41,42)" fg:x="1674" fg:w="73"/><text x="16.1974%" y="255.50"></text></g><g><title>boombots_engine::bitwise::Bitwise::idx (40 samples, 0.38%)</title><rect x="16.2618%" y="229" width="0.3811%" height="15" fill="rgb(224,123,36)" fg:x="1707" fg:w="40"/><text x="16.5118%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (7 samples, 0.07%)</title><rect x="16.5762%" y="213" width="0.0667%" height="15" fill="rgb(240,125,3)" fg:x="1740" fg:w="7"/><text x="16.8262%" y="223.50"></text></g><g><title>boombots_engine::action::Action::generate_for_height (372 samples, 3.54%)</title><rect x="13.2419%" y="261" width="3.5439%" height="15" fill="rgb(205,98,50)" fg:x="1390" fg:w="372"/><text x="13.4919%" y="271.50">boom..</text></g><g><title>boombots_engine::bitwise::Bitwise::lsb (15 samples, 0.14%)</title><rect x="16.6429%" y="245" width="0.1429%" height="15" fill="rgb(205,185,37)" fg:x="1747" fg:w="15"/><text x="16.8929%" y="255.50"></text></g><g><title>boombots_engine::action::Actions::new (3 samples, 0.03%)</title><rect x="16.7857%" y="261" width="0.0286%" height="15" fill="rgb(238,207,15)" fg:x="1762" fg:w="3"/><text x="17.0357%" y="271.50"></text></g><g><title>__GI___libc_free (18 samples, 0.17%)</title><rect x="16.8239%" y="181" width="0.1715%" height="15" fill="rgb(213,199,42)" fg:x="1766" fg:w="18"/><text x="17.0739%" y="191.50"></text></g><g><title>_int_free (16 samples, 0.15%)</title><rect x="16.8429%" y="165" width="0.1524%" height="15" fill="rgb(235,201,11)" fg:x="1768" fg:w="16"/><text x="17.0929%" y="175.50"></text></g><g><title>malloc_consolidate (5 samples, 0.05%)</title><rect x="16.9477%" y="149" width="0.0476%" height="15" fill="rgb(207,46,11)" fg:x="1779" fg:w="5"/><text x="17.1977%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.20%)</title><rect x="16.8143%" y="213" width="0.2001%" height="15" fill="rgb(241,35,35)" fg:x="1765" fg:w="21"/><text x="17.0643%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.19%)</title><rect x="16.8239%" y="197" width="0.1905%" height="15" fill="rgb(243,32,47)" fg:x="1766" fg:w="20"/><text x="17.0739%" y="207.50"></text></g><g><title>boombots_engine::action::Action::generate (525 samples, 5.00%)</title><rect x="12.0225%" y="277" width="5.0014%" height="15" fill="rgb(247,202,23)" fg:x="1262" fg:w="525"/><text x="12.2725%" y="287.50">boombo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;boombots_engine::action::Action&gt;&gt; (22 samples, 0.21%)</title><rect x="16.8143%" y="261" width="0.2096%" height="15" fill="rgb(219,102,11)" fg:x="1765" fg:w="22"/><text x="17.0643%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;boombots_engine::action::Action&gt;&gt; (22 samples, 0.21%)</title><rect x="16.8143%" y="245" width="0.2096%" height="15" fill="rgb(243,110,44)" fg:x="1765" fg:w="22"/><text x="17.0643%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.21%)</title><rect x="16.8143%" y="229" width="0.2096%" height="15" fill="rgb(222,74,54)" fg:x="1765" fg:w="22"/><text x="17.0643%" y="239.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::height (125 samples, 1.19%)</title><rect x="18.2624%" y="245" width="1.1908%" height="15" fill="rgb(216,99,12)" fg:x="1917" fg:w="125"/><text x="18.5124%" y="255.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::delta (306 samples, 2.92%)</title><rect x="17.0239%" y="277" width="2.9151%" height="15" fill="rgb(226,22,26)" fg:x="1787" fg:w="306"/><text x="17.2739%" y="287.50">bo..</text></g><g><title>boombots_engine::bitboard::Bitboard::delta_directional (182 samples, 1.73%)</title><rect x="18.2052%" y="261" width="1.7338%" height="15" fill="rgb(217,163,10)" fg:x="1911" fg:w="182"/><text x="18.4552%" y="271.50"></text></g><g><title>boombots_engine::bitwise::Bitwise::pos (51 samples, 0.49%)</title><rect x="19.4532%" y="245" width="0.4859%" height="15" fill="rgb(213,25,53)" fg:x="2042" fg:w="51"/><text x="19.7032%" y="255.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make_directional (360 samples, 3.43%)</title><rect x="20.4439%" y="261" width="3.4296%" height="15" fill="rgb(252,105,26)" fg:x="2146" fg:w="360"/><text x="20.6939%" y="271.50">boo..</text></g><g><title>boombots_engine::bitwise::Bitwise::idx (73 samples, 0.70%)</title><rect x="23.1781%" y="245" width="0.6954%" height="15" fill="rgb(220,39,43)" fg:x="2433" fg:w="73"/><text x="23.4281%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (9 samples, 0.09%)</title><rect x="23.7877%" y="229" width="0.0857%" height="15" fill="rgb(229,68,48)" fg:x="2497" fg:w="9"/><text x="24.0377%" y="239.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make (437 samples, 4.16%)</title><rect x="19.9390%" y="277" width="4.1631%" height="15" fill="rgb(252,8,32)" fg:x="2093" fg:w="437"/><text x="20.1890%" y="287.50">boomb..</text></g><g><title>boombots_engine::bitboard::Bitboard::toggle_turn (24 samples, 0.23%)</title><rect x="23.8735%" y="261" width="0.2286%" height="15" fill="rgb(223,20,43)" fg:x="2506" fg:w="24"/><text x="24.1235%" y="271.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::toggle_turn (24 samples, 0.23%)</title><rect x="24.4165%" y="261" width="0.2286%" height="15" fill="rgb(229,81,49)" fg:x="2563" fg:w="24"/><text x="24.6665%" y="271.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::undo (181 samples, 1.72%)</title><rect x="24.1021%" y="277" width="1.7243%" height="15" fill="rgb(236,28,36)" fg:x="2530" fg:w="181"/><text x="24.3521%" y="287.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::undo_directional (124 samples, 1.18%)</title><rect x="24.6451%" y="261" width="1.1813%" height="15" fill="rgb(249,185,26)" fg:x="2587" fg:w="124"/><text x="24.8951%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.03%)</title><rect x="32.1425%" y="261" width="0.0286%" height="15" fill="rgb(249,174,33)" fg:x="3374" fg:w="3"/><text x="32.3925%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="32.1425%" y="245" width="0.0286%" height="15" fill="rgb(233,201,37)" fg:x="3374" fg:w="3"/><text x="32.3925%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.81%)</title><rect x="32.1711%" y="261" width="0.8098%" height="15" fill="rgb(221,78,26)" fg:x="3377" fg:w="85"/><text x="32.4211%" y="271.50"></text></g><g><title>core::ptr::read (72 samples, 0.69%)</title><rect x="32.2949%" y="245" width="0.6859%" height="15" fill="rgb(250,127,30)" fg:x="3390" fg:w="72"/><text x="32.5449%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (17 samples, 0.16%)</title><rect x="33.1619%" y="197" width="0.1620%" height="15" fill="rgb(230,49,44)" fg:x="3481" fg:w="17"/><text x="33.4119%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next_back (76 samples, 0.72%)</title><rect x="33.0666%" y="213" width="0.7240%" height="15" fill="rgb(229,67,23)" fg:x="3471" fg:w="76"/><text x="33.3166%" y="223.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (49 samples, 0.47%)</title><rect x="33.3238%" y="197" width="0.4668%" height="15" fill="rgb(249,83,47)" fg:x="3498" fg:w="49"/><text x="33.5738%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.79%)</title><rect x="33.0666%" y="245" width="0.7907%" height="15" fill="rgb(215,43,3)" fg:x="3471" fg:w="83"/><text x="33.3166%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next_back (83 samples, 0.79%)</title><rect x="33.0666%" y="229" width="0.7907%" height="15" fill="rgb(238,154,13)" fg:x="3471" fg:w="83"/><text x="33.3166%" y="239.50"></text></g><g><title>boombots_engine::action::Action::generate (7 samples, 0.07%)</title><rect x="33.7906%" y="213" width="0.0667%" height="15" fill="rgb(219,56,2)" fg:x="3547" fg:w="7"/><text x="34.0406%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (3 samples, 0.03%)</title><rect x="33.9145%" y="181" width="0.0286%" height="15" fill="rgb(233,0,4)" fg:x="3560" fg:w="3"/><text x="34.1645%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.02%)</title><rect x="33.9240%" y="165" width="0.0191%" height="15" fill="rgb(235,30,7)" fg:x="3561" fg:w="2"/><text x="34.1740%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="33.9430%" y="149" width="0.0191%" height="15" fill="rgb(250,79,13)" fg:x="3563" fg:w="2"/><text x="34.1930%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.09%)</title><rect x="34.0192%" y="133" width="0.0857%" height="15" fill="rgb(211,146,34)" fg:x="3571" fg:w="9"/><text x="34.2692%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.09%)</title><rect x="34.0192%" y="117" width="0.0857%" height="15" fill="rgb(228,22,38)" fg:x="3571" fg:w="9"/><text x="34.2692%" y="127.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.09%)</title><rect x="34.0192%" y="101" width="0.0857%" height="15" fill="rgb(235,168,5)" fg:x="3571" fg:w="9"/><text x="34.2692%" y="111.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.09%)</title><rect x="34.0192%" y="85" width="0.0857%" height="15" fill="rgb(221,155,16)" fg:x="3571" fg:w="9"/><text x="34.2692%" y="95.50"></text></g><g><title>_int_realloc (7 samples, 0.07%)</title><rect x="34.0383%" y="69" width="0.0667%" height="15" fill="rgb(215,215,53)" fg:x="3573" fg:w="7"/><text x="34.2883%" y="79.50"></text></g><g><title>_int_malloc (5 samples, 0.05%)</title><rect x="34.0573%" y="53" width="0.0476%" height="15" fill="rgb(223,4,10)" fg:x="3575" fg:w="5"/><text x="34.3073%" y="63.50"></text></g><g><title>__GI___libc_malloc (27 samples, 0.26%)</title><rect x="34.1050%" y="133" width="0.2572%" height="15" fill="rgb(234,103,6)" fg:x="3580" fg:w="27"/><text x="34.3550%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (46 samples, 0.44%)</title><rect x="33.9621%" y="149" width="0.4382%" height="15" fill="rgb(227,97,0)" fg:x="3565" fg:w="46"/><text x="34.2121%" y="159.50"></text></g><g><title>__rdl_alloc (4 samples, 0.04%)</title><rect x="34.3622%" y="133" width="0.0381%" height="15" fill="rgb(234,150,53)" fg:x="3607" fg:w="4"/><text x="34.6122%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.04%)</title><rect x="34.3622%" y="117" width="0.0381%" height="15" fill="rgb(228,201,54)" fg:x="3607" fg:w="4"/><text x="34.6122%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (53 samples, 0.50%)</title><rect x="33.9430%" y="165" width="0.5049%" height="15" fill="rgb(222,22,37)" fg:x="3563" fg:w="53"/><text x="34.1930%" y="175.50"></text></g><g><title>core::cmp::max (4 samples, 0.04%)</title><rect x="34.4098%" y="149" width="0.0381%" height="15" fill="rgb(237,53,32)" fg:x="3612" fg:w="4"/><text x="34.6598%" y="159.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.04%)</title><rect x="34.4098%" y="133" width="0.0381%" height="15" fill="rgb(233,25,53)" fg:x="3612" fg:w="4"/><text x="34.6598%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.04%)</title><rect x="34.4098%" y="117" width="0.0381%" height="15" fill="rgb(210,40,34)" fg:x="3612" fg:w="4"/><text x="34.6598%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (58 samples, 0.55%)</title><rect x="33.9049%" y="213" width="0.5525%" height="15" fill="rgb(241,220,44)" fg:x="3559" fg:w="58"/><text x="34.1549%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (57 samples, 0.54%)</title><rect x="33.9145%" y="197" width="0.5430%" height="15" fill="rgb(235,28,35)" fg:x="3560" fg:w="57"/><text x="34.1645%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (54 samples, 0.51%)</title><rect x="33.9430%" y="181" width="0.5144%" height="15" fill="rgb(210,56,17)" fg:x="3563" fg:w="54"/><text x="34.1930%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (98 samples, 0.93%)</title><rect x="33.8573%" y="229" width="0.9336%" height="15" fill="rgb(224,130,29)" fg:x="3554" fg:w="98"/><text x="34.1073%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.33%)</title><rect x="34.4575%" y="213" width="0.3334%" height="15" fill="rgb(235,212,8)" fg:x="3617" fg:w="35"/><text x="34.7075%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (28 samples, 0.27%)</title><rect x="34.5241%" y="197" width="0.2667%" height="15" fill="rgb(223,33,50)" fg:x="3624" fg:w="28"/><text x="34.7741%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (101 samples, 0.96%)</title><rect x="33.8573%" y="245" width="0.9622%" height="15" fill="rgb(219,149,13)" fg:x="3554" fg:w="101"/><text x="34.1073%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3 samples, 0.03%)</title><rect x="34.7909%" y="229" width="0.0286%" height="15" fill="rgb(250,156,29)" fg:x="3652" fg:w="3"/><text x="35.0409%" y="239.50"></text></g><g><title>boombots_engine::action::Action::generate (272 samples, 2.59%)</title><rect x="34.8195%" y="245" width="2.5912%" height="15" fill="rgb(216,193,19)" fg:x="3655" fg:w="272"/><text x="35.0695%" y="255.50">bo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.05%)</title><rect x="40.9736%" y="213" width="0.0476%" height="15" fill="rgb(216,135,14)" fg:x="4301" fg:w="5"/><text x="41.2236%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (28 samples, 0.27%)</title><rect x="41.1070%" y="149" width="0.2667%" height="15" fill="rgb(241,47,5)" fg:x="4315" fg:w="28"/><text x="41.3570%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.05%)</title><rect x="41.3737%" y="149" width="0.0476%" height="15" fill="rgb(233,42,35)" fg:x="4343" fg:w="5"/><text x="41.6237%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (32 samples, 0.30%)</title><rect x="41.4214%" y="149" width="0.3048%" height="15" fill="rgb(231,13,6)" fg:x="4348" fg:w="32"/><text x="41.6714%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (18 samples, 0.17%)</title><rect x="41.5547%" y="133" width="0.1715%" height="15" fill="rgb(207,181,40)" fg:x="4362" fg:w="18"/><text x="41.8047%" y="143.50"></text></g><g><title>[libc-2.33.so] (3 samples, 0.03%)</title><rect x="43.4219%" y="53" width="0.0286%" height="15" fill="rgb(254,173,49)" fg:x="4558" fg:w="3"/><text x="43.6719%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (61 samples, 0.58%)</title><rect x="43.4505%" y="53" width="0.5811%" height="15" fill="rgb(221,1,38)" fg:x="4561" fg:w="61"/><text x="43.7005%" y="63.50"></text></g><g><title>_int_free (60 samples, 0.57%)</title><rect x="44.0316%" y="53" width="0.5716%" height="15" fill="rgb(206,124,46)" fg:x="4622" fg:w="60"/><text x="44.2816%" y="63.50"></text></g><g><title>__GI___libc_realloc (361 samples, 3.44%)</title><rect x="42.0406%" y="85" width="3.4391%" height="15" fill="rgb(249,21,11)" fg:x="4413" fg:w="361"/><text x="42.2906%" y="95.50">__G..</text></g><g><title>_int_realloc (283 samples, 2.70%)</title><rect x="42.7837%" y="69" width="2.6960%" height="15" fill="rgb(222,201,40)" fg:x="4491" fg:w="283"/><text x="43.0337%" y="79.50">_i..</text></g><g><title>_int_malloc (92 samples, 0.88%)</title><rect x="44.6032%" y="53" width="0.8764%" height="15" fill="rgb(235,61,29)" fg:x="4682" fg:w="92"/><text x="44.8532%" y="63.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.02%)</title><rect x="45.4606%" y="37" width="0.0191%" height="15" fill="rgb(219,207,3)" fg:x="4772" fg:w="2"/><text x="45.7106%" y="47.50"></text></g><g><title>__rdl_realloc (24 samples, 0.23%)</title><rect x="45.4797%" y="85" width="0.2286%" height="15" fill="rgb(222,56,46)" fg:x="4774" fg:w="24"/><text x="45.7297%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (10 samples, 0.10%)</title><rect x="45.6130%" y="69" width="0.0953%" height="15" fill="rgb(239,76,54)" fg:x="4788" fg:w="10"/><text x="45.8630%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (401 samples, 3.82%)</title><rect x="42.0025%" y="133" width="3.8201%" height="15" fill="rgb(231,124,27)" fg:x="4409" fg:w="401"/><text x="42.2525%" y="143.50">&lt;all..</text></g><g><title>alloc::alloc::Global::grow_impl (401 samples, 3.82%)</title><rect x="42.0025%" y="117" width="3.8201%" height="15" fill="rgb(249,195,6)" fg:x="4409" fg:w="401"/><text x="42.2525%" y="127.50">allo..</text></g><g><title>alloc::alloc::realloc (398 samples, 3.79%)</title><rect x="42.0311%" y="101" width="3.7916%" height="15" fill="rgb(237,174,47)" fg:x="4412" fg:w="398"/><text x="42.2811%" y="111.50">allo..</text></g><g><title>__rust_realloc (12 samples, 0.11%)</title><rect x="45.7083%" y="85" width="0.1143%" height="15" fill="rgb(206,201,31)" fg:x="4798" fg:w="12"/><text x="45.9583%" y="95.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.10%)</title><rect x="45.8226%" y="133" width="0.0953%" height="15" fill="rgb(231,57,52)" fg:x="4810" fg:w="10"/><text x="46.0726%" y="143.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="45.9179%" y="133" width="0.0191%" height="15" fill="rgb(248,177,22)" fg:x="4820" fg:w="2"/><text x="46.1679%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="45.9179%" y="117" width="0.0191%" height="15" fill="rgb(215,211,37)" fg:x="4820" fg:w="2"/><text x="46.1679%" y="127.50"></text></g><g><title>__rust_alloc (4 samples, 0.04%)</title><rect x="45.9369%" y="133" width="0.0381%" height="15" fill="rgb(241,128,51)" fg:x="4822" fg:w="4"/><text x="46.1869%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (450 samples, 4.29%)</title><rect x="41.7262%" y="149" width="4.2869%" height="15" fill="rgb(227,165,31)" fg:x="4380" fg:w="450"/><text x="41.9762%" y="159.50">alloc..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.04%)</title><rect x="45.9750%" y="133" width="0.0381%" height="15" fill="rgb(228,167,24)" fg:x="4826" fg:w="4"/><text x="46.2250%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::array (10 samples, 0.10%)</title><rect x="46.0131%" y="149" width="0.0953%" height="15" fill="rgb(228,143,12)" fg:x="4830" fg:w="10"/><text x="46.2631%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2 samples, 0.02%)</title><rect x="46.0894%" y="133" width="0.0191%" height="15" fill="rgb(249,149,8)" fg:x="4838" fg:w="2"/><text x="46.3394%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (2 samples, 0.02%)</title><rect x="46.0894%" y="117" width="0.0191%" height="15" fill="rgb(243,35,44)" fg:x="4838" fg:w="2"/><text x="46.3394%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (540 samples, 5.14%)</title><rect x="41.0212%" y="165" width="5.1443%" height="15" fill="rgb(246,89,9)" fg:x="4306" fg:w="540"/><text x="41.2712%" y="175.50">alloc:..</text></g><g><title>core::cmp::max (6 samples, 0.06%)</title><rect x="46.1084%" y="149" width="0.0572%" height="15" fill="rgb(233,213,13)" fg:x="4840" fg:w="6"/><text x="46.3584%" y="159.50"></text></g><g><title>core::cmp::Ord::max (6 samples, 0.06%)</title><rect x="46.1084%" y="133" width="0.0572%" height="15" fill="rgb(233,141,41)" fg:x="4840" fg:w="6"/><text x="46.3584%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.06%)</title><rect x="46.1084%" y="117" width="0.0572%" height="15" fill="rgb(239,167,4)" fg:x="4840" fg:w="6"/><text x="46.3584%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (549 samples, 5.23%)</title><rect x="41.0212%" y="197" width="5.2301%" height="15" fill="rgb(209,217,16)" fg:x="4306" fg:w="549"/><text x="41.2712%" y="207.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (549 samples, 5.23%)</title><rect x="41.0212%" y="181" width="5.2301%" height="15" fill="rgb(219,88,35)" fg:x="4306" fg:w="549"/><text x="41.2712%" y="191.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.09%)</title><rect x="46.1656%" y="165" width="0.0857%" height="15" fill="rgb(220,193,23)" fg:x="4846" fg:w="9"/><text x="46.4156%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (558 samples, 5.32%)</title><rect x="41.0212%" y="213" width="5.3158%" height="15" fill="rgb(230,90,52)" fg:x="4306" fg:w="558"/><text x="41.2712%" y="223.50">alloc::..</text></g><g><title>boombots_engine::action::Action::generate (9 samples, 0.09%)</title><rect x="46.2513%" y="197" width="0.0857%" height="15" fill="rgb(252,106,19)" fg:x="4855" fg:w="9"/><text x="46.5013%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (13 samples, 0.12%)</title><rect x="46.3370%" y="213" width="0.1238%" height="15" fill="rgb(206,74,20)" fg:x="4864" fg:w="13"/><text x="46.5870%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.12%)</title><rect x="46.3370%" y="197" width="0.1238%" height="15" fill="rgb(230,138,44)" fg:x="4864" fg:w="13"/><text x="46.5870%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (833 samples, 7.94%)</title><rect x="39.3350%" y="229" width="7.9356%" height="15" fill="rgb(235,182,43)" fg:x="4129" fg:w="833"/><text x="39.5850%" y="239.50">alloc::vec:..</text></g><g><title>core::ptr::write (85 samples, 0.81%)</title><rect x="46.4609%" y="213" width="0.8098%" height="15" fill="rgb(242,16,51)" fg:x="4877" fg:w="85"/><text x="46.7109%" y="223.50"></text></g><g><title>boombots_engine::action::Action::generate (9 samples, 0.09%)</title><rect x="47.2706%" y="229" width="0.0857%" height="15" fill="rgb(248,9,4)" fg:x="4962" fg:w="9"/><text x="47.5206%" y="239.50"></text></g><g><title>boombots_engine::action::Action::is_attack (30 samples, 0.29%)</title><rect x="47.3564%" y="229" width="0.2858%" height="15" fill="rgb(210,31,22)" fg:x="4971" fg:w="30"/><text x="47.6064%" y="239.50"></text></g><g><title>boombots_engine::action::Action::is_defend (4 samples, 0.04%)</title><rect x="47.6422%" y="229" width="0.0381%" height="15" fill="rgb(239,54,39)" fg:x="5001" fg:w="4"/><text x="47.8922%" y="239.50"></text></g><g><title>boombots_engine::bitwise::Bitwise::adj (285 samples, 2.72%)</title><rect x="47.6803%" y="229" width="2.7151%" height="15" fill="rgb(230,99,41)" fg:x="5005" fg:w="285"/><text x="47.9303%" y="239.50">bo..</text></g><g><title>boombots_engine::bitwise::Bitwise::idx (154 samples, 1.47%)</title><rect x="48.9283%" y="213" width="1.4671%" height="15" fill="rgb(253,106,12)" fg:x="5136" fg:w="154"/><text x="49.1783%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (32 samples, 0.30%)</title><rect x="50.0905%" y="197" width="0.3048%" height="15" fill="rgb(213,46,41)" fg:x="5258" fg:w="32"/><text x="50.3405%" y="207.50"></text></g><g><title>boombots_engine::action::Action::generate_for_height (1,430 samples, 13.62%)</title><rect x="37.4107%" y="245" width="13.6229%" height="15" fill="rgb(215,133,35)" fg:x="3927" fg:w="1430"/><text x="37.6607%" y="255.50">boombots_engine::acti..</text></g><g><title>boombots_engine::bitwise::Bitwise::lsb (67 samples, 0.64%)</title><rect x="50.3954%" y="229" width="0.6383%" height="15" fill="rgb(213,28,5)" fg:x="5290" fg:w="67"/><text x="50.6454%" y="239.50"></text></g><g><title>boombots_engine::action::Actions::new (6 samples, 0.06%)</title><rect x="51.0336%" y="245" width="0.0572%" height="15" fill="rgb(215,77,49)" fg:x="5357" fg:w="6"/><text x="51.2836%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (5 samples, 0.05%)</title><rect x="51.0432%" y="229" width="0.0476%" height="15" fill="rgb(248,100,22)" fg:x="5358" fg:w="5"/><text x="51.2932%" y="239.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="51.5195%" y="133" width="0.0191%" height="15" fill="rgb(208,67,9)" fg:x="5408" fg:w="2"/><text x="51.7695%" y="143.50"></text></g><g><title>__GI___libc_free (45 samples, 0.43%)</title><rect x="51.1194%" y="165" width="0.4287%" height="15" fill="rgb(219,133,21)" fg:x="5366" fg:w="45"/><text x="51.3694%" y="175.50"></text></g><g><title>_int_free (35 samples, 0.33%)</title><rect x="51.2146%" y="149" width="0.3334%" height="15" fill="rgb(246,46,29)" fg:x="5376" fg:w="35"/><text x="51.4646%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.49%)</title><rect x="51.0908%" y="197" width="0.4859%" height="15" fill="rgb(246,185,52)" fg:x="5363" fg:w="51"/><text x="51.3408%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (48 samples, 0.46%)</title><rect x="51.1194%" y="181" width="0.4573%" height="15" fill="rgb(252,136,11)" fg:x="5366" fg:w="48"/><text x="51.3694%" y="191.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="51.5576%" y="165" width="0.0191%" height="15" fill="rgb(219,138,53)" fg:x="5412" fg:w="2"/><text x="51.8076%" y="175.50"></text></g><g><title>boombots_engine::action::Action::generate (1,954 samples, 18.61%)</title><rect x="32.9809%" y="261" width="18.6148%" height="15" fill="rgb(211,51,23)" fg:x="3462" fg:w="1954"/><text x="33.2309%" y="271.50">boombots_engine::action::Acti..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;boombots_engine::action::Action&gt;&gt; (53 samples, 0.50%)</title><rect x="51.0908%" y="245" width="0.5049%" height="15" fill="rgb(247,221,28)" fg:x="5363" fg:w="53"/><text x="51.3408%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;boombots_engine::action::Action&gt;&gt; (53 samples, 0.50%)</title><rect x="51.0908%" y="229" width="0.5049%" height="15" fill="rgb(251,222,45)" fg:x="5363" fg:w="53"/><text x="51.3408%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.50%)</title><rect x="51.0908%" y="213" width="0.5049%" height="15" fill="rgb(217,162,53)" fg:x="5363" fg:w="53"/><text x="51.3408%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="51.5766%" y="197" width="0.0191%" height="15" fill="rgb(229,93,14)" fg:x="5414" fg:w="2"/><text x="51.8266%" y="207.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::height (429 samples, 4.09%)</title><rect x="55.4063%" y="229" width="4.0869%" height="15" fill="rgb(209,67,49)" fg:x="5816" fg:w="429"/><text x="55.6563%" y="239.50">boom..</text></g><g><title>boombots_engine::bitboard::Bitboard::delta (985 samples, 9.38%)</title><rect x="51.5957%" y="261" width="9.3836%" height="15" fill="rgb(213,87,29)" fg:x="5416" fg:w="985"/><text x="51.8457%" y="271.50">boombots_engi..</text></g><g><title>boombots_engine::bitboard::Bitboard::delta_directional (621 samples, 5.92%)</title><rect x="55.0634%" y="245" width="5.9160%" height="15" fill="rgb(205,151,52)" fg:x="5780" fg:w="621"/><text x="55.3134%" y="255.50">boombots..</text></g><g><title>boombots_engine::bitwise::Bitwise::pos (156 samples, 1.49%)</title><rect x="59.4932%" y="229" width="1.4861%" height="15" fill="rgb(253,215,39)" fg:x="6245" fg:w="156"/><text x="59.7432%" y="239.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make_directional (1,178 samples, 11.22%)</title><rect x="62.6179%" y="245" width="11.2223%" height="15" fill="rgb(221,220,41)" fg:x="6573" fg:w="1178"/><text x="62.8679%" y="255.50">boombots_engine::..</text></g><g><title>boombots_engine::bitwise::Bitwise::idx (249 samples, 2.37%)</title><rect x="71.4680%" y="229" width="2.3721%" height="15" fill="rgb(218,133,21)" fg:x="7502" fg:w="249"/><text x="71.7180%" y="239.50">bo..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (29 samples, 0.28%)</title><rect x="73.5639%" y="213" width="0.2763%" height="15" fill="rgb(221,193,43)" fg:x="7722" fg:w="29"/><text x="73.8139%" y="223.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make (1,426 samples, 13.58%)</title><rect x="60.9793%" y="261" width="13.5848%" height="15" fill="rgb(240,128,52)" fg:x="6401" fg:w="1426"/><text x="61.2293%" y="271.50">boombots_engine::bitb..</text></g><g><title>boombots_engine::bitboard::Bitboard::toggle_turn (76 samples, 0.72%)</title><rect x="73.8401%" y="245" width="0.7240%" height="15" fill="rgb(253,114,12)" fg:x="7751" fg:w="76"/><text x="74.0901%" y="255.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::toggle_turn (60 samples, 0.57%)</title><rect x="75.8026%" y="245" width="0.5716%" height="15" fill="rgb(215,223,47)" fg:x="7957" fg:w="60"/><text x="76.0526%" y="255.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::undo (585 samples, 5.57%)</title><rect x="74.5642%" y="261" width="5.5730%" height="15" fill="rgb(248,225,23)" fg:x="7827" fg:w="585"/><text x="74.8142%" y="271.50">boombot..</text></g><g><title>boombots_engine::bitboard::Bitboard::undo_directional (395 samples, 3.76%)</title><rect x="76.3742%" y="245" width="3.7630%" height="15" fill="rgb(250,108,0)" fg:x="8017" fg:w="395"/><text x="76.6242%" y="255.50">boom..</text></g><g><title>boombots_engine::evaluate::Evaluate::evaluate (4 samples, 0.04%)</title><rect x="80.1372%" y="261" width="0.0381%" height="15" fill="rgb(228,208,7)" fg:x="8412" fg:w="4"/><text x="80.3872%" y="271.50"></text></g><g><title>boombots_engine::evaluate::Evaluate::outcome (51 samples, 0.49%)</title><rect x="80.1753%" y="261" width="0.4859%" height="15" fill="rgb(244,45,10)" fg:x="8416" fg:w="51"/><text x="80.4253%" y="271.50"></text></g><g><title>boombots_engine::evaluate::Evaluate::evaluate (19 samples, 0.18%)</title><rect x="82.7189%" y="245" width="0.1810%" height="15" fill="rgb(207,125,25)" fg:x="8683" fg:w="19"/><text x="82.9689%" y="255.50"></text></g><g><title>boombots_engine::evaluate::Evaluate::outcome (238 samples, 2.27%)</title><rect x="82.8999%" y="245" width="2.2673%" height="15" fill="rgb(210,195,18)" fg:x="8702" fg:w="238"/><text x="83.1499%" y="255.50">b..</text></g><g><title>boombots_engine::search::Search::negamax_score (21 samples, 0.20%)</title><rect x="85.1672%" y="245" width="0.2001%" height="15" fill="rgb(249,80,12)" fg:x="8940" fg:w="21"/><text x="85.4172%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (42 samples, 0.40%)</title><rect x="89.7495%" y="213" width="0.4001%" height="15" fill="rgb(221,65,9)" fg:x="9421" fg:w="42"/><text x="89.9995%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (55 samples, 0.52%)</title><rect x="89.7495%" y="229" width="0.5240%" height="15" fill="rgb(235,49,36)" fg:x="9421" fg:w="55"/><text x="89.9995%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.12%)</title><rect x="90.1496%" y="213" width="0.1238%" height="15" fill="rgb(225,32,20)" fg:x="9463" fg:w="13"/><text x="90.3996%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.12%)</title><rect x="90.1496%" y="197" width="0.1238%" height="15" fill="rgb(215,141,46)" fg:x="9463" fg:w="13"/><text x="90.3996%" y="207.50"></text></g><g><title>boombots_engine::search::Search::negamax_score (9 samples, 0.09%)</title><rect x="90.2734%" y="229" width="0.0857%" height="15" fill="rgb(250,160,47)" fg:x="9476" fg:w="9"/><text x="90.5234%" y="239.50"></text></g><g><title>boombots_engine::transpose::TranspositionTable::lookup (531 samples, 5.06%)</title><rect x="85.3672%" y="245" width="5.0586%" height="15" fill="rgb(216,222,40)" fg:x="8961" fg:w="531"/><text x="85.6172%" y="255.50">boombo..</text></g><g><title>boombots_engine::transpose::TranspositionTable::index (7 samples, 0.07%)</title><rect x="90.3592%" y="229" width="0.0667%" height="15" fill="rgb(234,217,39)" fg:x="9485" fg:w="7"/><text x="90.6092%" y="239.50"></text></g><g><title>boombots_engine::search::Search::negamax_score (25 samples, 0.24%)</title><rect x="90.4258%" y="213" width="0.2382%" height="15" fill="rgb(207,178,40)" fg:x="9492" fg:w="25"/><text x="90.6758%" y="223.50"></text></g><g><title>boombots_engine::search::Search::negamax_score (1,068 samples, 10.17%)</title><rect x="80.6611%" y="261" width="10.1743%" height="15" fill="rgb(221,136,13)" fg:x="8467" fg:w="1068"/><text x="80.9111%" y="271.50">boombots_engine..</text></g><g><title>core::cmp::min (43 samples, 0.41%)</title><rect x="90.4258%" y="245" width="0.4096%" height="15" fill="rgb(249,199,10)" fg:x="9492" fg:w="43"/><text x="90.6758%" y="255.50"></text></g><g><title>core::cmp::Ord::min (43 samples, 0.41%)</title><rect x="90.4258%" y="229" width="0.4096%" height="15" fill="rgb(249,222,13)" fg:x="9492" fg:w="43"/><text x="90.6758%" y="239.50"></text></g><g><title>core::cmp::min_by (18 samples, 0.17%)</title><rect x="90.6640%" y="213" width="0.1715%" height="15" fill="rgb(244,185,38)" fg:x="9517" fg:w="18"/><text x="90.9140%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.08%)</title><rect x="93.6458%" y="245" width="0.0762%" height="15" fill="rgb(236,202,9)" fg:x="9830" fg:w="8"/><text x="93.8958%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.08%)</title><rect x="93.6458%" y="229" width="0.0762%" height="15" fill="rgb(250,229,37)" fg:x="9830" fg:w="8"/><text x="93.8958%" y="239.50"></text></g><g><title>boombots_engine::search::Search::negamax_score (2 samples, 0.02%)</title><rect x="93.7220%" y="245" width="0.0191%" height="15" fill="rgb(206,174,23)" fg:x="9838" fg:w="2"/><text x="93.9720%" y="255.50"></text></g><g><title>boombots_engine::transpose::TranspositionTable::lookup (306 samples, 2.92%)</title><rect x="90.8355%" y="261" width="2.9151%" height="15" fill="rgb(211,33,43)" fg:x="9535" fg:w="306"/><text x="91.0855%" y="271.50">bo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.03%)</title><rect x="93.9602%" y="245" width="0.0286%" height="15" fill="rgb(245,58,50)" fg:x="9863" fg:w="3"/><text x="94.2102%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="93.9697%" y="229" width="0.0191%" height="15" fill="rgb(244,68,36)" fg:x="9864" fg:w="2"/><text x="94.2197%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="93.9697%" y="213" width="0.0191%" height="15" fill="rgb(232,229,15)" fg:x="9864" fg:w="2"/><text x="94.2197%" y="223.50"></text></g><g><title>boombots_engine::transpose::TranspositionTable::store (30 samples, 0.29%)</title><rect x="93.7506%" y="261" width="0.2858%" height="15" fill="rgb(254,30,23)" fg:x="9841" fg:w="30"/><text x="94.0006%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.04%)</title><rect x="93.9983%" y="245" width="0.0381%" height="15" fill="rgb(235,160,14)" fg:x="9867" fg:w="4"/><text x="94.2483%" y="255.50"></text></g><g><title>boombots_engine::search::Search::negamax_score (10 samples, 0.10%)</title><rect x="94.0364%" y="229" width="0.0953%" height="15" fill="rgb(212,155,44)" fg:x="9871" fg:w="10"/><text x="94.2864%" y="239.50"></text></g><g><title>core::cmp::min (15 samples, 0.14%)</title><rect x="94.0364%" y="261" width="0.1429%" height="15" fill="rgb(226,2,50)" fg:x="9871" fg:w="15"/><text x="94.2864%" y="271.50"></text></g><g><title>core::cmp::Ord::min (15 samples, 0.14%)</title><rect x="94.0364%" y="245" width="0.1429%" height="15" fill="rgb(234,177,6)" fg:x="9871" fg:w="15"/><text x="94.2864%" y="255.50"></text></g><g><title>core::cmp::min_by (5 samples, 0.05%)</title><rect x="94.1317%" y="229" width="0.0476%" height="15" fill="rgb(217,24,9)" fg:x="9881" fg:w="5"/><text x="94.3817%" y="239.50"></text></g><g><title>__GI___libc_free (37 samples, 0.35%)</title><rect x="94.1888%" y="133" width="0.3525%" height="15" fill="rgb(220,13,46)" fg:x="9887" fg:w="37"/><text x="94.4388%" y="143.50"></text></g><g><title>_int_free (27 samples, 0.26%)</title><rect x="94.2841%" y="117" width="0.2572%" height="15" fill="rgb(239,221,27)" fg:x="9897" fg:w="27"/><text x="94.5341%" y="127.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="94.5222%" y="101" width="0.0191%" height="15" fill="rgb(222,198,25)" fg:x="9922" fg:w="2"/><text x="94.7722%" y="111.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.03%)</title><rect x="94.5413%" y="133" width="0.0286%" height="15" fill="rgb(211,99,13)" fg:x="9924" fg:w="3"/><text x="94.7913%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.03%)</title><rect x="94.5413%" y="117" width="0.0286%" height="15" fill="rgb(232,111,31)" fg:x="9924" fg:w="3"/><text x="94.7913%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.40%)</title><rect x="94.1793%" y="165" width="0.4001%" height="15" fill="rgb(245,82,37)" fg:x="9886" fg:w="42"/><text x="94.4293%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.40%)</title><rect x="94.1793%" y="149" width="0.4001%" height="15" fill="rgb(227,149,46)" fg:x="9886" fg:w="42"/><text x="94.4293%" y="159.50"></text></g><g><title>boombots_engine::search::Search::negamax_score (7,218 samples, 68.76%)</title><rect x="25.8455%" y="277" width="68.7625%" height="15" fill="rgb(218,36,50)" fg:x="2713" fg:w="7218"/><text x="26.0955%" y="287.50">boombots_engine::search::Search::negamax_score</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;boombots_engine::action::Action&gt;&gt; (45 samples, 0.43%)</title><rect x="94.1793%" y="261" width="0.4287%" height="15" fill="rgb(226,80,48)" fg:x="9886" fg:w="45"/><text x="94.4293%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.43%)</title><rect x="94.1793%" y="245" width="0.4287%" height="15" fill="rgb(238,224,15)" fg:x="9886" fg:w="45"/><text x="94.4293%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;boombots_engine::action::Action,alloc::alloc::Global&gt;&gt; (45 samples, 0.43%)</title><rect x="94.1793%" y="229" width="0.4287%" height="15" fill="rgb(241,136,10)" fg:x="9886" fg:w="45"/><text x="94.4293%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.43%)</title><rect x="94.1793%" y="213" width="0.4287%" height="15" fill="rgb(208,32,45)" fg:x="9886" fg:w="45"/><text x="94.4293%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;boombots_engine::action::Action&gt;&gt; (45 samples, 0.43%)</title><rect x="94.1793%" y="197" width="0.4287%" height="15" fill="rgb(207,135,9)" fg:x="9886" fg:w="45"/><text x="94.4293%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.43%)</title><rect x="94.1793%" y="181" width="0.4287%" height="15" fill="rgb(206,86,44)" fg:x="9886" fg:w="45"/><text x="94.4293%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.03%)</title><rect x="94.5794%" y="165" width="0.0286%" height="15" fill="rgb(245,177,15)" fg:x="9928" fg:w="3"/><text x="94.8294%" y="175.50"></text></g><g><title>boombots_engine::transpose::TranspositionTable::lookup (50 samples, 0.48%)</title><rect x="94.6080%" y="277" width="0.4763%" height="15" fill="rgb(206,64,50)" fg:x="9931" fg:w="50"/><text x="94.8580%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="95.1129%" y="261" width="0.0191%" height="15" fill="rgb(234,36,40)" fg:x="9984" fg:w="2"/><text x="95.3629%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="95.1129%" y="245" width="0.0191%" height="15" fill="rgb(213,64,8)" fg:x="9984" fg:w="2"/><text x="95.3629%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="95.1129%" y="229" width="0.0191%" height="15" fill="rgb(210,75,36)" fg:x="9984" fg:w="2"/><text x="95.3629%" y="239.50"></text></g><g><title>boombots_engine::transpose::TranspositionTable::store (9 samples, 0.09%)</title><rect x="95.0843%" y="277" width="0.0857%" height="15" fill="rgb(229,88,21)" fg:x="9981" fg:w="9"/><text x="95.3343%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.04%)</title><rect x="95.1319%" y="261" width="0.0381%" height="15" fill="rgb(252,204,47)" fg:x="9986" fg:w="4"/><text x="95.3819%" y="271.50"></text></g><g><title>__GI___libc_free (11 samples, 0.10%)</title><rect x="95.1796%" y="149" width="0.1048%" height="15" fill="rgb(208,77,27)" fg:x="9991" fg:w="11"/><text x="95.4296%" y="159.50"></text></g><g><title>_int_free (9 samples, 0.09%)</title><rect x="95.1986%" y="133" width="0.0857%" height="15" fill="rgb(221,76,26)" fg:x="9993" fg:w="9"/><text x="95.4486%" y="143.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="95.2653%" y="117" width="0.0191%" height="15" fill="rgb(225,139,18)" fg:x="10000" fg:w="2"/><text x="95.5153%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.12%)</title><rect x="95.1700%" y="181" width="0.1238%" height="15" fill="rgb(230,137,11)" fg:x="9990" fg:w="13"/><text x="95.4200%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.11%)</title><rect x="95.1796%" y="165" width="0.1143%" height="15" fill="rgb(212,28,1)" fg:x="9991" fg:w="12"/><text x="95.4296%" y="175.50"></text></g><g><title>boombots_engine::search::Search::negamax_score (8,975 samples, 85.50%)</title><rect x="9.8028%" y="293" width="85.5006%" height="15" fill="rgb(248,164,17)" fg:x="1029" fg:w="8975"/><text x="10.0528%" y="303.50">boombots_engine::search::Search::negamax_score</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;boombots_engine::action::Action&gt;&gt; (14 samples, 0.13%)</title><rect x="95.1700%" y="277" width="0.1334%" height="15" fill="rgb(222,171,42)" fg:x="9990" fg:w="14"/><text x="95.4200%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.13%)</title><rect x="95.1700%" y="261" width="0.1334%" height="15" fill="rgb(243,84,45)" fg:x="9990" fg:w="14"/><text x="95.4200%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;boombots_engine::action::Action,alloc::alloc::Global&gt;&gt; (14 samples, 0.13%)</title><rect x="95.1700%" y="245" width="0.1334%" height="15" fill="rgb(252,49,23)" fg:x="9990" fg:w="14"/><text x="95.4200%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.13%)</title><rect x="95.1700%" y="229" width="0.1334%" height="15" fill="rgb(215,19,7)" fg:x="9990" fg:w="14"/><text x="95.4200%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;boombots_engine::action::Action&gt;&gt; (14 samples, 0.13%)</title><rect x="95.1700%" y="213" width="0.1334%" height="15" fill="rgb(238,81,41)" fg:x="9990" fg:w="14"/><text x="95.4200%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.13%)</title><rect x="95.1700%" y="197" width="0.1334%" height="15" fill="rgb(210,199,37)" fg:x="9990" fg:w="14"/><text x="95.4200%" y="207.50"></text></g><g><title>boombots_engine::search::Search::negamax_move (9,076 samples, 86.46%)</title><rect x="8.8501%" y="357" width="86.4628%" height="15" fill="rgb(244,192,49)" fg:x="929" fg:w="9076"/><text x="9.1001%" y="367.50">boombots_engine::search::Search::negamax_move</text></g><g><title>boombots_engine::search::Search::negamax_score (9,076 samples, 86.46%)</title><rect x="8.8501%" y="341" width="86.4628%" height="15" fill="rgb(226,211,11)" fg:x="929" fg:w="9076"/><text x="9.1001%" y="351.50">boombots_engine::search::Search::negamax_score</text></g><g><title>boombots_engine::search::Search::negamax_score (9,076 samples, 86.46%)</title><rect x="8.8501%" y="325" width="86.4628%" height="15" fill="rgb(236,162,54)" fg:x="929" fg:w="9076"/><text x="9.1001%" y="335.50">boombots_engine::search::Search::negamax_score</text></g><g><title>boombots_engine::search::Search::negamax_score (9,068 samples, 86.39%)</title><rect x="8.9264%" y="309" width="86.3866%" height="15" fill="rgb(220,229,9)" fg:x="937" fg:w="9068"/><text x="9.1764%" y="319.50">boombots_engine::search::Search::negamax_score</text></g><g><title>__libc_start_main (9,077 samples, 86.47%)</title><rect x="8.8501%" y="597" width="86.4723%" height="15" fill="rgb(250,87,22)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="607.50">__libc_start_main</text></g><g><title>main (9,077 samples, 86.47%)</title><rect x="8.8501%" y="581" width="86.4723%" height="15" fill="rgb(239,43,17)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (9,077 samples, 86.47%)</title><rect x="8.8501%" y="565" width="86.4723%" height="15" fill="rgb(231,177,25)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (9,077 samples, 86.47%)</title><rect x="8.8501%" y="549" width="86.4723%" height="15" fill="rgb(219,179,1)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,077 samples, 86.47%)</title><rect x="8.8501%" y="533" width="86.4723%" height="15" fill="rgb(238,219,53)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,077 samples, 86.47%)</title><rect x="8.8501%" y="517" width="86.4723%" height="15" fill="rgb(232,167,36)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (9,077 samples, 86.47%)</title><rect x="8.8501%" y="501" width="86.4723%" height="15" fill="rgb(244,19,51)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="511.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (9,077 samples, 86.47%)</title><rect x="8.8501%" y="485" width="86.4723%" height="15" fill="rgb(224,6,22)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,077 samples, 86.47%)</title><rect x="8.8501%" y="469" width="86.4723%" height="15" fill="rgb(224,145,5)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,077 samples, 86.47%)</title><rect x="8.8501%" y="453" width="86.4723%" height="15" fill="rgb(234,130,49)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,077 samples, 86.47%)</title><rect x="8.8501%" y="437" width="86.4723%" height="15" fill="rgb(254,6,2)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (9,077 samples, 86.47%)</title><rect x="8.8501%" y="421" width="86.4723%" height="15" fill="rgb(208,96,46)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,077 samples, 86.47%)</title><rect x="8.8501%" y="405" width="86.4723%" height="15" fill="rgb(239,3,39)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (9,077 samples, 86.47%)</title><rect x="8.8501%" y="389" width="86.4723%" height="15" fill="rgb(233,210,1)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>boombots_engine::main (9,077 samples, 86.47%)</title><rect x="8.8501%" y="373" width="86.4723%" height="15" fill="rgb(244,137,37)" fg:x="929" fg:w="9077"/><text x="9.1001%" y="383.50">boombots_engine::main</text></g><g><title>_start (9,083 samples, 86.53%)</title><rect x="8.8025%" y="613" width="86.5295%" height="15" fill="rgb(240,136,2)" fg:x="924" fg:w="9083"/><text x="9.0525%" y="623.50">_start</text></g><g><title>boombots_engine::action::Action::generate (3 samples, 0.03%)</title><rect x="95.3320%" y="613" width="0.0286%" height="15" fill="rgb(239,18,37)" fg:x="10007" fg:w="3"/><text x="95.5820%" y="623.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::delta (129 samples, 1.23%)</title><rect x="95.3606%" y="613" width="1.2289%" height="15" fill="rgb(218,185,22)" fg:x="10010" fg:w="129"/><text x="95.6106%" y="623.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::make (101 samples, 0.96%)</title><rect x="96.5895%" y="613" width="0.9622%" height="15" fill="rgb(225,218,4)" fg:x="10139" fg:w="101"/><text x="96.8395%" y="623.50"></text></g><g><title>boombots_engine::bitboard::Bitboard::undo (35 samples, 0.33%)</title><rect x="97.5517%" y="613" width="0.3334%" height="15" fill="rgb(230,182,32)" fg:x="10240" fg:w="35"/><text x="97.8017%" y="623.50"></text></g><g><title>all (10,497 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="10497"/><text x="0.2500%" y="655.50"></text></g><g><title>boombots-engine (10,497 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="10497"/><text x="0.2500%" y="639.50">boombots-engine</text></g><g><title>boombots_engine::search::Search::negamax_score (222 samples, 2.11%)</title><rect x="97.8851%" y="613" width="2.1149%" height="15" fill="rgb(234,209,42)" fg:x="10275" fg:w="222"/><text x="98.1351%" y="623.50">b..</text></g></svg></svg>